#! python3
# kslam_alphaCount_to_simpson
# Script that will read in files generated by the kslam_xml_to_alphaCount.py script
# to format a table appropriate for input into R and VEGAN to perform alpha diversity calculations

import os, argparse

##### USER INPUT SECTION

usage = """%(prog)s reads in k-SLAM files within a user-specified directory dthat have been
run through the kslam_xml_to_alphaCount.py script to produce a table that
is amenable to alpha diversity calculation using VEGAN.
"""
p = argparse.ArgumentParser(description=usage)
p.add_argument("-d", "-directory", dest="inDir",
                  help="Directory containing alpha counts files")
p.add_argument("-s", "-suffix", dest="suffix",
                  help="File suffix that distinguishes alpha counts files from others")
p.add_argument("-o", "--o", "-output", "--output", dest="outName",
                  help="output file name")
args = p.parse_args()

# Obtain data from arguments
inDir = args.inDir
suffix = args.suffix
outName = args.outName

# Get files from specified directory
kslam_files = []
siteNames = []
for file in os.listdir(inDir):
        if file.endswith(suffix):
                kslam_files.append(file)
                siteNames.append(file.split(suffix)[0])
if kslam_files == []:
        print('Failed to find files in the directory. Are the files located at "' + inDir + '" or do they contain the suffix "' + suffix + '"?')
        quit()

#### CORE LOOP
savedDicts = []
for filename in kslam_files:
        # Load the kslam file
        kslamFile = open(os.path.join(inDir, filename), 'r').read().split('\n')
        
        # Tally counts
        countsDict = {}
        for line in kslamFile:
                if line.startswith('#') or line == '' or line == '\n':
                        continue
                line = line.rstrip('\n').split('\t')
                name = line[0]
                countsDict.setdefault(name, 0)
                countsDict[name] = countsDict[name] + float(line[2])
        # Save dictionary as a list for later sorting
        savedDicts.append(countsDict)

#### Format an output table from the saved dictionaries

# Pull out all entries found in the data
taxonomyList = []
for dictionary in savedDicts:
    for entry in dictionary.items():
        taxonomyList.append(entry[0])
taxonomyList = sorted(list(set(taxonomyList)))

# Tabulate results
header = taxonomyList[:]
header.insert(0, '')
table = []
table.append(header)
for i in range(len(kslam_files)):
    sampleName = siteNames[i]
    row = [sampleName]
    for entry in taxonomyList:
        if entry in savedDicts[i]:
            row.append(str(savedDicts[i][entry]))
        else:
            row.append('0')
    table.append(row)

# Output file
for x in range(len(table)):
    table[x] = '\t'.join(table[x])
output = '\n'.join(table)
outFile = open(os.path.join(inDir, outName), 'w')
outFile.write(output)
outFile.close()

print('Finished')
